windbg ANSI Command Tree 1.0 
title {"netext cheat sheet"} 
body
{"General"}
 {"Load"} {".load netext"}
 {"Index"} {"!windex"}
 {"Create Objects Tree"} {"!windex -tree"}
 {"Stack Objects"} {"~*e!wstack"}
 {"Enumerate types"} {"!windex -enumtypes"}
 {"Dump Rooted Objects"} {"!wgchandles"}
 {"Get Heap Info Only"} {"!wheap -detailsonly"}
{"Database"}
 {"Dump Commands"} {"!wfrom -nospace -nofield -type System.Data.SqlClient.SqlCommand select "===========","\nAddress: ",$addr(), "\nSQL Command: \n[------]\n", _commandText, "\n[------]\nTime Out: ", $tickstotimespan($timespantoticks(0,0,_commandTimeout)), "\nAsync Command in Progress?: ",_activeConnection._AsycCommandInProgress, "\nConnection compromised?: ", _activeConnection._innerConnection._connectionIsDoomed, "\nCreation Time: ", $isnull($tickstodatetime(_activeConnection._innerConnection._createTime.dateData), "Not available")"}
 {"Dump DataReaders"} {"!wfrom -nospace -nofield -type System.Data.SqlClient.SqlDataReader where (_command) select "===========","\nAddress: ",_command, "\nBehavior: ", $enumname(_commandBehavior), "\nClosed?: ",_isClosed, "\nInitialized?: ", _isInitialized, "\nHas Rows?: ", _hasRows,  "\nBytes Read/Remaining: ", _columnDataBytesRead, "/", _columnDataBytesRemaining,  "\nSystem Type: ",$enumname(_typeSystem), "\nReader Timeout: ",$tickstotimespan($timespantoticks(0,0,_timeoutSeconds)), "\nSQL Command: \n[------]\n", _command._commandText, "\n[------]\nCommand Timeout: ", $tickstotimespan($timespantoticks(0,0,_command._commandTimeout)), "\nAsync Command in Progress?: ",_command._activeConnection._AsycCommandInProgress, "\nConnection compromised?: ", _command._activeConnection._innerConnection._connectionIsDoomed, "\nCommand Creation Time: ", $isnull($tickstodatetime(_command._activeConnection._innerConnection._createTime.dateData), "Not available"), "\nReader Start Time: ", $tickstodatetime(_parser._connHandler._createTime.dateData), "\nTime Elapsed: ", $tickstotimespan($now()-_parser._connHandler._createTime.dateData), "\nDatabase: ", _parser._connHandler._originalDatabase, "\nServer: ", _parser._server"}
{"WCF"}
 {"List all WCF Services"} {"!wservice"}
 {"WCF Thread Running Requests"} {"!wfrom -nospace -nofield -type *HostedHttpRequestAsyncResult select $typename()," : ",$addr(), "\n","Uri : ", $isnull(originalRequestUri.m_String,"NA"),"\n", "Context Object: ", $isnull(context._context, "NA"),"\n", "Thread: ",$isnull("~~["+$tohexstring(context._context._thread.DONT_USE_InternalThread)+"]", "NA")"}
 {"Outbond Requests"} {"!wfrom -nofield -nospace -implement System.ServiceModel.Channels.OutputChannel "Address:", $addr(), " Url:", to.uri.m_String"}
 {"Pending Requests"} {"r $t1=0;!wfrom -nospace -nofield -type *HostedHttpRequestAsyncResult where (!isCompleted) select $addr(), "\t", $if(isCompleted, "Complete", "Pending"), "\t", $isnull("~~["+$tohexstring(context._context._thread.DONT_USE_InternalThread)+"]", "No Thread"), "\t", "(", context, ") ", $typefrommt($poi(context)), "\t", $fieldfromobj($fieldfromobj($addr(), "<OriginalRequestUri>k__BackingField"),"m_String"), $if(0,"",$dbgrun("r $t1=@$t1+1"));.printf "\n%u Pending Requests\n",@$t1"}
 {"Complete Requests"} {"r $t1=0;!wfrom -nospace -nofield -type *HostedHttpRequestAsyncResult where (isCompleted) select $addr(), "\t", $if(isCompleted, "Complete", "Pending"), "\t", $isnull("~~["+$tohexstring(context._context._thread.DONT_USE_InternalThread)+"]", "No Thread"), "\t", "(", context, ") ", $typefrommt($poi(context)), "\t", $fieldfromobj($fieldfromobj($addr(), "<OriginalRequestUri>k__BackingField"),"m_String"), $if(0,"",$dbgrun("r $t1=@$t1+1"));.printf "\n%u Pending Requests\n",@$t1"}
 {"net.tcp"}
  {"net.tcp endpoints"} {"!wfrom -nospace -nofield -type System.Net.ServicePoint select "\n===========", "\nAddress: ", $addr(), "\nLookup String: ", m_LookupString, "\nHost Name: ", m_HostName, "\nPort: ", m_Port,  "\nDns?: ",$if(m_ConnectedSinceDns, "Yes", "No"), "\nTrusted: ", $if(m_IsTrustedHost, "Yes", "No"), "\nConnetion Name: ", m_ConnectionName, "\nIsProxy EndPoint? ", $if(m_ProxyServicePoint, "Yes", "No"), "\nLoopback guess: ", $enumname(m_HostLoopbackGuess), "\nLoopback?: ", $if(m_IPAddressesAreLoopback, "Yes", "No"), "\nSettings changed by user?: ", $if(m_UserChangedLimit, "Yes", "No"),  "\nConnection Limit: ", m_ConnectionLimit, "\nCurrent Connections: ", m_CurrentConnections, "\nHost Mode: ", $if(m_HostMode, "Yes", "No")"}
  {"net.tcp connected sockets"} {"r @$t1=0;!wfrom -nospace -nofield -type System.Net.Sockets.Socket where (m_IsConnected) select "\nAddress: ", $addr(), "\nConnected: ", $if(m_IsConnected, "true", "false"), "\nBlocking: ",  $if(willBlock, "true", "false"), "\nType: ", $enumname(protocolType), "\nServer/Client: ", $if(isListening, "Server", "Client"), "\nDestination: ", $substr($tonumberstring(m_RightEndpoint.m_Address.m_address & 0xff),2,3),".",$substr($tonumberstring(m_RightEndpoint.m_Address.m_address / 0x100 & 0xff),2,3),".",$substr($tonumberstring(m_RightEndpoint.m_Address.m_address / 0x10000 & 0xff),2,3), ".",$substr($tonumberstring(m_RightEndpoint.m_Address.m_address / 0x1000000 & 0xff),2,3), ":",$substr(m_RightEndpoint.m_Port, 2,10), $dbgrun("r @$t1 = @$t1+1");.printf "\n\nConnected Sockets : %i\n", @$t1"}
  {"net.tcp disconnected sockets"} {"r @$t1=0;!wfrom -nospace -nofield -type System.Net.Sockets.Socket where (!m_IsConnected) select "\nAddress: ", $addr(), "\nConnected: ", $if(m_IsConnected, "true", "false"), "\nBlocking: ",  $if(willBlock, "true", "false"), "\nType: ", $enumname(protocolType), "\nServer/Client: ", $if(isListening, "Server", "Client"), "\nDestination: ", $substr($tonumberstring(m_RightEndpoint.m_Address.m_address & 0xff),2,3),".",$substr($tonumberstring(m_RightEndpoint.m_Address.m_address / 0x100 & 0xff),2,3),".",$substr($tonumberstring(m_RightEndpoint.m_Address.m_address / 0x10000 & 0xff),2,3), ".",$substr($tonumberstring(m_RightEndpoint.m_Address.m_address / 0x1000000 & 0xff),2,3), ":",$substr(m_RightEndpoint.m_Port, 2,10), $dbgrun("r @$t1 = @$t1+1");.printf "\n\nDisconnected Sockets : %i\n", @$t1"}
  {"net.tcp errors"} {"!wfrom -type System.ServiceModel.Channels.SocketConnection where (aborted) select "====",$addr(), aborted, isShutdown, $enumname(closeState), $if(socket, "socket state is "+$tostring(socket.m_Handle._state), "No socket"), socket.m_IsConnected, timeoutErrorString, $enumname(timeoutErrorTransferOperation)"}
{"Security/WIF"}
 {"Expired/Valid Tokens"} {"!wfrom -nospace -nofield -type System.ServiceModel.Security.Tokens.SecurityContextSecurityToken select $addr()," ",  id," ",$tickstodatetime(keyExpirationTime.dateData)," ",$if(keyExpirationTime.dateData > $now(), "Valid", "Expired")"}
 